@page "/country-summary"
@inject CountryService CountryService

<h3>Country Summary</h3>
<!-- Form for Country Selection -->
<select class="form-select" @onchange="OnCountrySelected">
    <option value="">-- Select a Country --</option>
    @if (countryNames != null)
    {
        @foreach (var name in countryNames)
        {
            <option value="@name">@name</option>
        }
    }
</select>

@if (selectedCountry != null)
{
    <h4 class="mt-4">@selectedCountry.Name</h4>
    <table class="table">
        <tbody>
            <tr>
                <th>Country Code</th>
                <td>@selectedCountry.Code</td>
            </tr>
            @if (selectedCountry.InternetStatistics != null && selectedCountry.InternetStatistics.Any())
            {
                var stat = selectedCountry.InternetStatistics.FirstOrDefault();
                <tr>
                    <th>WB Rate</th>
                    <td>@(stat?.PercentWB?.ToString("0.##") ?? "N/A")</td>
                </tr>
                <tr>
                    <th>WB Year</th>
                    <td>@(stat?.YearWB?.ToString() ?? "N/A")</td>
                </tr>
                <tr>
                    <th>ITU Rate</th>
                    <td>@(stat?.PercentITU?.ToString("0.##") ?? "N/A")</td>
                </tr>
                <tr>
                    <th>ITU Year</th>
                    <td>@(stat?.YearITU?.ToString() ?? "N/A")</td>
                </tr>
                <tr>
                    <th>CIA Population</th>
                    <td>@(stat?.PopulationCIA?.ToString() ?? "N/A")</td>
                </tr>
                <tr>
                    <th>CIA Year</th>
                    <td>@(stat?.YearCIA?.ToString() ?? "N/A")</td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Update Option for Country Data -->
    <h4>Update WB Rate</h4>
    <EditForm Model="updateModel" OnValidSubmit="UpdateRate" style="padding-bottom: 20px">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">New WB Rate (0,100):</label>
            <InputNumber @bind-Value="updateModel.NewRate" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary" style="background-color:#3D4A5D; border:transparent">Update</button>
    </EditForm>
}

@code {
    private List<string>? countryNames;
    private Country? selectedCountry;
    private string errorMessage = string.Empty;

    private UpdateModel updateModel = new();

    protected override async Task OnInitializedAsync()
    {
        // Load the list of country names for the dropdown
        countryNames = await CountryService.GetCountryNamesAsync();
    }

    // On-click event of selecting the Country
    private async Task OnCountrySelected(ChangeEventArgs e)
    {
        var selectedName = e.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(selectedName))
        {
            selectedCountry = await CountryService.GetCountryByNameAsync(selectedName);
        }
        else
        {
            selectedCountry = null;
        }
    }

    private async Task UpdateRate()
    {
        errorMessage = string.Empty;

        if (updateModel.NewRate < 0 || updateModel.NewRate > 100)
        {
            errorMessage = "Rate must be between 0 and 100.";
            return;
        }

        try
        {
            var updatedStatistic = await CountryService.UpdateWBRateAsync(selectedCountry!.Code!, updateModel.NewRate.Value);

            selectedCountry = await CountryService.GetCountryByNameAsync(selectedCountry.Name!);

            updateModel.NewRate = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Update failed: {ex.Message}";
        }
    }

    public class UpdateModel
    {
        [Range(0, 100, ErrorMessage = "Rate must be between 0 and 100.")]
        public decimal? NewRate { get; set; }
    }
}
