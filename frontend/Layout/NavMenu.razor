@inject IJSRuntime jsRuntime

<div class="d-flex flex-column" style="height: 100vh;">
    <div class="top-row ps-3 navbar navbar-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="Home">QuanTrak</a>
            <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
        </div>
    </div>

    <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
        <nav class="flex-column">
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="CountryLeague">
                    <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Country League Table
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="CountrySummary">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Country Summary
                </NavLink>
            </div>
        </nav>
    </div>

    <div class="mt-auto p-3">
        <button class="btn btn-secondary w-100" @onclick="ToggleTheme">
            Switch to @(isDarkMode ? "Light" : "Dark") Mode
        </button>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;
    private bool isDarkMode = false;

    // The "collapse" class is added when the nav is collapsed.
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

    private async Task ToggleTheme()
    {
        // Toggle the theme flag.
        isDarkMode = !isDarkMode;
        // Determine which CSS class to apply.
        var themeClass = isDarkMode ? "dark-mode" : "light-mode";
        // Use JS interop to update the <body> class (or you could update a shared state).
        await jsRuntime.InvokeVoidAsync("setBodyClass", themeClass);
    }
}
